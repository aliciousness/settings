[\gitk]
        gk = \gitk --all --branches &!
        gke = \gitk --all $(git log -g --pretty=%h) &!

[_default]
        - = cd -
        ... = ../..
        .... = ../../..
        ..... = ../../../..
        ...... = ../../../../..
        _ = sudo
        a = ansible
        acon = ansible-console
        aconf = ansible-config
        adoc = ansible-doc
        agal = ansible-galaxy
        ainv = ansible-inventory
        aplaybook = ansible-playbook
        apull = ansible-pull
        arinit = ansible-role-init
        aval = ansible-vault
        aver = ansible-version
        diff = diff --color
        ggpur = ggu
        globurl = noglob urlglobber
        glp = _git_log_prettily
        grep = grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}
        grt = cd "$(git rev-parse --show-toplevel || echo .)
        gstu = gsta --include-untracked
        gtl = gtl(){ git tag --sort=-v:refname -n -l "${1}*" }; noglob gtl
        h = history
        history = omz_history
        ipython = python3 -c '\''import IPython; IPython.terminal.ipapp.launch_new_instance()'\
        md = mkdir -p
        pip = noglob pip
        py = python3
        pyfind = find . -name "*.py
        pygrep = grep -nr --include="*.py
        pyserver = python3 -m http.server
        rd = rmdir
        which-command = whence

[cd]
        1 = cd -1
        2 = cd -2
        3 = cd -3
        4 = cd -4
        5 = cd -5
        6 = cd -6
        7 = cd -7
        8 = cd -8
        9 = cd -9

[docker]
        dbl = docker build
        dcb = docker compose build
        dcdn = docker compose down
        dce = docker compose exec
        dcin = docker container inspect
        dck = docker compose kill
        dcl = docker compose logs
        dclf = docker compose logs -f
        dcls = docker container ls
        dclsa = docker container ls -a
        dco = docker compose
        dcps = docker compose ps
        dcpull = docker compose pull
        dcr = docker compose run
        dcrestart = docker compose restart
        dcrm = docker compose rm
        dcstart = docker compose start
        dcstop = docker compose stop
        dcup = docker compose up
        dcupb = docker compose up --build
        dcupd = docker compose up -d
        dib = docker image build
        dii = docker image inspect
        dils = docker image ls
        dipu = docker image push
        dirm = docker image rm
        dit = docker image tag
        dlo = docker container logs
        dnc = docker network create
        dncn = docker network connect
        dndcn = docker network disconnect
        dni = docker network inspect
        dnls = docker network ls
        dnrm = docker network rm
        dpo = docker container port
        dpu = docker pull
        dr = docker container run
        drit = docker container run -it
        drm = docker container rm
        'drm!' = docker container rm -f
        dst = docker container start
        dstp = docker container stop
        dtop = docker top
        dvi = docker volume inspect
        dvls = docker volume ls
        dvprune = docker volume prune
        dxc = docker container exec
        dxcit = docker container exec -it

[git]
        g = git
        ga = git add
        gaa = git add --all
        gam = git am
        gama = git am --abort
        gamc = git am --continue
        gams = git am --skip
        gamscp = git am --show-current-patch
        gap = git apply
        gapa = git add --patch
        gapt = git apply --3way
        gau = git add --update
        gav = git add --verbose
        gb = git branch
        gbD = git branch -D
        gba = git branch -a
        gbd = git branch -d
        gbda = git branch --no-color --merged | command grep -vE "^([+*]|\s*($(git_main_branch)|$(git_develop_branch))\s*$)" | command xargs git branch -d 2>/dev/null
        gbl = git blame -b -w
        gbnm = git branch --no-merged
        gbr = git branch --remote
        gbs = git bisect
        gbsb = git bisect bad
        gbsg = git bisect good
        gbsr = git bisect reset
        gbss = git bisect start
        gc = git commit -v
        'gc!' = git commit -v --amend
        gca = git commit -v -a
        'gca!' = git commit -v -a --amend
        gcam = git commit -a -m
        'gcan!' = git commit -v -a --no-edit --amend
        'gcans!' = git commit -v -a -s --no-edit --amend
        gcas = git commit -a -s
        gcasm = git commit -a -s -m
        gcb = git checkout -b
        gcd = git checkout $(git_develop_branch)
        gcf = git config --list
        gcl = git clone --recurse-submodules
        gclean = git clean -id
        gcm = git checkout $(git_main_branch)
        gcmsg = git commit -m
        'gcn!' = git commit -v --no-edit --amend
        gco = git checkout
        gcor = git checkout --recurse-submodules
        gcount = git shortlog -sn
        gcp = git cherry-pick
        gcpa = git cherry-pick --abort
        gcpc = git cherry-pick --continue
        gcs = git commit -S
        gcsm = git commit -s -m
        gcss = git commit -S -s
        gcssm = git commit -S -s -m
        gd = git diff
        gdca = git diff --cached
        gdct = git describe --tags $(git rev-list --tags --max-count=1)
        gdcw = git diff --cached --word-diff
        gds = git diff --staged
        gdt = git diff-tree --no-commit-id --name-only -r
        gdup = git diff @{upstream}
        gdw = git diff --word-diff
        gf = git fetch
        gfa = git fetch --all --prune --jobs=10
        gfg = git ls-files | grep
        gfo = git fetch origin
        gg = git gui citool
        gga = git gui citool --amend
        ggpull = git pull origin "$(git_current_branch)
        ggpush = git push origin "$(git_current_branch)
        ggsup = git branch --set-upstream-to=origin/$(git_current_branch)
        ghh = git help
        gignore = git update-index --assume-unchanged
        gignored = git ls-files -v | grep "^[[:lower:]]
        git-svn-dcommit-push = git svn dcommit && git push github $(git_main_branch):svntrunk
        gl = git pull
        glg = git log --stat
        glgg = git log --graph
        glgga = git log --graph --decorate --all
        glgm = git log --graph --max-count=10
        glgp = git log --stat -p
        glo = git log --oneline --decorate
        glod = git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\
        glods = git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\'' --date=short
        glog = git log --oneline --decorate --graph
        gloga = git log --oneline --decorate --graph --all
        glol = git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\
        glola = git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --all
        glols = git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --stat
        gluc = git pull upstream $(git_current_branch)
        glum = git pull upstream $(git_main_branch)
        gm = git merge
        gma = git merge --abort
        gmom = git merge origin/$(git_main_branch)
        gmtl = git mergetool --no-prompt
        gmtlvim = git mergetool --no-prompt --tool=vimdiff
        gmum = git merge upstream/$(git_main_branch)
        gp = git push
        gpd = git push --dry-run
        gpf = git push --force-with-lease
        'gpf!' = git push --force
        gpoat = git push origin --all && git push origin --tags
        gpr = git pull --rebase
        gpristine = git reset --hard && git clean -dffx
        gpsup = git push --set-upstream origin $(git_current_branch)
        gpu = git push upstream
        gpv = git push -v
        gr = git remote
        gra = git remote add
        grb = git rebase
        grba = git rebase --abort
        grbc = git rebase --continue
        grbd = git rebase $(git_develop_branch)
        grbi = git rebase -i
        grbm = git rebase $(git_main_branch)
        grbo = git rebase --onto
        grbom = git rebase origin/$(git_main_branch)
        grbs = git rebase --skip
        grev = git revert
        grh = git reset
        grhh = git reset --hard
        grm = git rm
        grmc = git rm --cached
        grmv = git remote rename
        groh = git reset origin/$(git_current_branch) --hard
        grrm = git remote remove
        grs = git restore
        grset = git remote set-url
        grss = git restore --source
        grst = git restore --staged
        gru = git reset --
        grup = git remote update
        grv = git remote -v
        gsb = git status -sb
        gsd = git svn dcommit
        gsh = git show
        gsi = git submodule init
        gsps = git show --pretty=short --show-signature
        gsr = git svn rebase
        gss = git status -s
        gst = git status
        gsta = git stash push
        gstaa = git stash apply
        gstall = git stash --all
        gstc = git stash clear
        gstd = git stash drop
        gstl = git stash list
        gstp = git stash pop
        gsts = git stash show --text
        gsu = git submodule update
        gsw = git switch
        gswc = git switch -c
        gswd = git switch $(git_develop_branch)
        gswm = git switch $(git_main_branch)
        gts = git tag -s
        gtv = git tag | sort -V
        gunignore = git update-index --no-assume-unchanged
        gunwip = git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1
        gup = git pull --rebase
        gupa = git pull --rebase --autostash
        gupav = git pull --rebase --autostash -v
        gupom = git pull --rebase origin $(git_main_branch)
        gupomi = git pull --rebase=interactive origin $(git_main_branch)
        gupv = git pull --rebase -v
        gwch = git whatchanged -p --abbrev-commit --pretty=medium
        gwip = git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]

[grep]
        egrep = grep -E --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}
        fgrep = grep -F --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}

[history]
        hs = history | grep
        hsi = history | grep -i

[ls]
        l = ls -lah
        la = ls -lAh
        ll = ls -lh
        ls = ls --color=tty
        lsa = ls -lah

[pip]
        pipir = pip install -r requirements.txt
        pipreq = pip freeze > requirements.txt

[terraform]
        tf = terraform
        tfa = terraform apply
        tfd = terraform destroy
        tff = terraform fmt
        tfi = terraform init
        tfo = terraform output
        tfp = terraform plan
        tfv = terraform validate
